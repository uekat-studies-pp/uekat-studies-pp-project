version: "3"

services:
    nginx:
        build:
            context: ./docker/nginx/dev
            args:
                - NGINX_IMAGE_VERSION=${NGINX_IMAGE_VERSION}
        platform: linux/x86_64
        working_dir: /var/www/html
        ports:
            - ${NGINX_HTTP_PORT}:80
            - ${NGINX_HTTPS_PORT}:443
        depends_on:
            - backend
            - frontend
        volumes:
            - ./docker/nginx/dev/nginx.conf:/etc/nginx/nginx.conf:ro
            - ./docker/nginx/dev/sites-available/:/etc/nginx/sites-available:ro
            - ./docker/nginx/dev/ssl/:/etc/nginx/ssl:rw
            - /etc/timezone:/etc/timezone:ro
            - /etc/localtime:/etc/localtime:ro
        networks:
            - backend
            - frontend

    backend:
        build:
            context: .
            dockerfile: docker/backend/dev/Dockerfile
            args:
                - PYTHON_IMAGE_VERSION=${PYTHON_IMAGE_VERSION}
                - POSTGRES_USER=${POSTGRES_USER}
                - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
                - POSTGRES_DB=${POSTGRES_DB}
                - POSTGRES_HOST=${POSTGRES_HOST}
                - POSTGRES_PORT=${POSTGRES_PORT}
        platform: linux/x86_64
        working_dir: /app
        ports:
            - ${BACKEND_PORT}:8000
        volumes:
            - ./backend:/app:rw
            - /etc/timezone:/etc/timezone:ro
            - /etc/localtime:/etc/localtime:ro
        networks:
            - backend

    scraper:
        build:
            context: .
            dockerfile: docker/scraper/dev/Dockerfile
            args:
                - PYTHON_IMAGE_VERSION=${PYTHON_IMAGE_VERSION}
                - POSTGRES_USER=${POSTGRES_USER}
                - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
                - POSTGRES_DB=${POSTGRES_DB}
                - POSTGRES_HOST=${POSTGRES_HOST}
                - POSTGRES_PORT=${POSTGRES_PORT}
        platform: linux/x86_64
        working_dir: /app
        volumes:
            - ./scraper:/app:rw
            - /etc/timezone:/etc/timezone:ro
            - /etc/localtime:/etc/localtime:ro
        networks:
            - backend

    frontend:
        build:
            context: .
            dockerfile: docker/frontend/dev/Dockerfile
            args:
                - NODE_IMAGE_VERSION=${NODE_IMAGE_VERSION}
        platform: linux/x86_64
        working_dir: /app
        ports:
            - ${FRONTEND_PORT}:5173
        volumes:
            - ./frontend:/app:rw
            - /etc/timezone:/etc/timezone:ro
            - /etc/localtime:/etc/localtime:ro
        networks:
            - frontend

    db:
        image: postgres:${POSTGRES_IMAGE_VERSION}
        platform: linux/x86_64
        ports:
            - ${DB_PORT}:5432
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
        volumes:
            - db_data:/var/lib/postgresql/data:rw
        networks:
            - backend

networks:
    frontend:
    backend:

volumes:
    db_data:
